// Code generated by MockGen. DO NOT EDIT.
// Source: ./docker.go

// Package docker is a generated GoMock package.
package docker

import (
	context "context"
	reflect "reflect"

	container "github.com/docker/docker/api/types/container"
	gomock "github.com/golang/mock/gomock"
)

// MockDockerClientInterface is a mock of DockerClientInterface interface.
type MockDockerClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDockerClientInterfaceMockRecorder
}

// MockDockerClientInterfaceMockRecorder is the mock recorder for MockDockerClientInterface.
type MockDockerClientInterfaceMockRecorder struct {
	mock *MockDockerClientInterface
}

// NewMockDockerClientInterface creates a new mock instance.
func NewMockDockerClientInterface(ctrl *gomock.Controller) *MockDockerClientInterface {
	mock := &MockDockerClientInterface{ctrl: ctrl}
	mock.recorder = &MockDockerClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDockerClientInterface) EXPECT() *MockDockerClientInterfaceMockRecorder {
	return m.recorder
}

// ContainerList mocks base method.
func (m *MockDockerClientInterface) ContainerList(ctx context.Context, options container.ListOptions) ([]container.Summary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerList", ctx, options)
	ret0, _ := ret[0].([]container.Summary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerList indicates an expected call of ContainerList.
func (mr *MockDockerClientInterfaceMockRecorder) ContainerList(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerList", reflect.TypeOf((*MockDockerClientInterface)(nil).ContainerList), ctx, options)
}

// ContainerStats mocks base method.
func (m *MockDockerClientInterface) ContainerStats(ctx context.Context, containerID string, stream bool) (container.StatsResponseReader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerStats", ctx, containerID, stream)
	ret0, _ := ret[0].(container.StatsResponseReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerStats indicates an expected call of ContainerStats.
func (mr *MockDockerClientInterfaceMockRecorder) ContainerStats(ctx, containerID, stream interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerStats", reflect.TypeOf((*MockDockerClientInterface)(nil).ContainerStats), ctx, containerID, stream)
}
